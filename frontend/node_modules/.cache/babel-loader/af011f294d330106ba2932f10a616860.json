{"ast":null,"code":"var _jsxFileName = \"/Users/ruichunchen/splitwise-app/frontend/src/pages/Expenses.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useContext, useEffect } from 'react';\nimport { Button, Form, Col, Row, Image, Dropdown, Jumbotron, Container } from 'react-bootstrap';\nimport ActivityInput from '../components/ActivityInput';\nimport Balance from '../components/Balance';\nimport SingleExpense from '../pages/SingleExpense';\nimport logo from '../images/signup.png';\nimport { DB, DB_PIC } from '../constants/DB';\nimport { ActivityContext } from '../contexts/activityContext';\nimport { GroupContext } from '../contexts/groupContext';\nimport { faPen, faTimes } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { Application } from '../components/export';\nimport Picture from '../components/Picture';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction Expenses(props) {\n  _s();\n\n  const monthNames = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\n  const [display, setDisplay] = useState(\"none\");\n  const [picture, setPicture] = useState();\n  const [name, setName] = useState();\n  const [userInfo, setUserInfo] = useState();\n  const {\n    activities\n  } = useContext(ActivityContext);\n  const {\n    groups\n  } = useContext(GroupContext);\n  const leave_URL = `${DB}/reject`;\n  const update_URL = `${DB}/update`;\n  let pic = `${DB_PIC}/${props.id}/profile.png`;\n  let expenseList = [];\n\n  if (activities && groups) {\n    if (props.no) {\n      expenseList.push( /*#__PURE__*/_jsxDEV(\"div\", {\n        children: props.no\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 30\n      }, this));\n    } else {\n      let activity = activities.filter(a => a.G_ID === props.id);\n      activity.map((item, index) => {\n        expenseList.push( /*#__PURE__*/_jsxDEV(ActivityInput, {\n          value: item\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 34\n        }, this));\n      });\n    }\n  }\n\n  expenseList.sort((a, b) => a.props.value.date > b.props.value.date ? -1 : 1);\n\n  function refreshPage() {\n    window.location.reload(false);\n  }\n\n  function leave() {\n    const calculate_URL = `${DB}/calculate`;\n    fetch(calculate_URL, {\n      method: 'post',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        id: props.id\n      })\n    }).then(res => res.json()).then(result => {\n      // setUser(result.dataset)\n      setUserInfo(result.dataset);\n      console.log(\"calculate: \", result.dataset);\n    });\n    let user = userInfo.filter(u => u.user === localStorage.getItem('authID'));\n    console.log(\"user\", user); // if(activity.length > 0){\n    //     alert(\"You should pay off all/get pack all the expenses before you leave the group!\")\n    // }else{\n    //     fetch(leave_URL, {\n    //         method: 'post',\n    //         headers: {\n    //             'Accept': 'application/json',\n    //             'Content-Type': 'application/json'\n    //         },\n    //         body: JSON.stringify({\n    //             name: props.name,\n    //             member: localStorage.getItem('authID')\n    //         })\n    //     }).then(res => res.json()).then(result=>{\n    //         console.log(result.dataset);\n    //     })\n    // }\n  }\n\n  function toggleDisplay() {\n    if (display === \"none\") setDisplay(\"display\");else setDisplay(\"none\");\n  }\n\n  const createItem = async newItem => {\n    setPicture(newItem.image);\n    console.log(\"inside createItem\");\n  };\n\n  async function update() {\n    const formData = new FormData();\n    formData.append('name', name);\n    formData.append('id', props.id);\n    formData.append('update', 'update');\n    formData.append('upload', 'group');\n    formData.append('picture', picture);\n    axios({\n      method: \"POST\",\n      url: update_URL,\n      data: formData,\n      headers: {\n        \"Content-Type\": \"multipart/form-data\"\n      }\n    }).then(response => {\n      console.log(\"response\", response);\n      setTimeout(refreshPage, 1000);\n    });\n  }\n\n  console.log(\"props name\", props.name);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Col, {\n      sm: 6,\n      children: [/*#__PURE__*/_jsxDEV(Jumbotron, {\n        style: {\n          padding: \"10px\"\n        },\n        children: /*#__PURE__*/_jsxDEV(Container, {\n          children: [/*#__PURE__*/_jsxDEV(Row, {\n            children: [/*#__PURE__*/_jsxDEV(Image, {\n              src: pic,\n              style: {\n                width: \"50px\",\n                height: \"50px\"\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 129,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n              children: [props.name, \" Expenses\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 130,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(SingleExpense, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 131,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Button, {\n              variant: \"secondary\",\n              className: \"ml-3\",\n              onClick: leave,\n              children: \"Leave Group\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 132,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 128,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Row, {\n            children: /*#__PURE__*/_jsxDEV(\"h6\", {\n              children: [monthNames[new Date().getMonth()], \" \", new Date().getFullYear()]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 137,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 136,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Row, {\n        children: expenseList\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Col, {\n      sm: 3,\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        children: \"GROUP BALANCES\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Balance, {\n        id: props.id\n      }, Math.random(), false, {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"link\",\n        className: \"ml-3\",\n        onClick: toggleDisplay,\n        children: \"Edit...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Application.Group, {\n      display: display,\n      children: [/*#__PURE__*/_jsxDEV(Application.Close, {\n        toggleDisplay: toggleDisplay,\n        children: /*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n          icon: faTimes\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 153,\n          columnNumber: 62\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Row, {\n        className: \"justify-content-md-center\",\n        children: [/*#__PURE__*/_jsxDEV(Col, {\n          sm: 4,\n          children: /*#__PURE__*/_jsxDEV(Picture, {\n            createItem: createItem,\n            old: pic\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 156,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 155,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(Col, {\n          sm: 8,\n          children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n            children: \"Change Group Information\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 159,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"h6\", {\n            children: \"My new group name shall be called...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 160,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n            type: \"text\",\n            placeholder: props.name,\n            onChange: ({\n              target\n            }) => setName(target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 161,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 158,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Row, {\n        className: \"justify-content-md-center\",\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"danger\",\n          onClick: update,\n          children: \"Save\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 165,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n}\n\n_s(Expenses, \"Scu+86afbrIKuCiVfJYic1wvFjc=\");\n\n_c = Expenses;\nexport default Expenses;\n\nvar _c;\n\n$RefreshReg$(_c, \"Expenses\");","map":{"version":3,"sources":["/Users/ruichunchen/splitwise-app/frontend/src/pages/Expenses.js"],"names":["React","useState","useContext","useEffect","Button","Form","Col","Row","Image","Dropdown","Jumbotron","Container","ActivityInput","Balance","SingleExpense","logo","DB","DB_PIC","ActivityContext","GroupContext","faPen","faTimes","FontAwesomeIcon","Application","Picture","axios","Expenses","props","monthNames","display","setDisplay","picture","setPicture","name","setName","userInfo","setUserInfo","activities","groups","leave_URL","update_URL","pic","id","expenseList","no","push","activity","filter","a","G_ID","map","item","index","sort","b","value","date","refreshPage","window","location","reload","leave","calculate_URL","fetch","method","headers","body","JSON","stringify","then","res","json","result","dataset","console","log","user","u","localStorage","getItem","toggleDisplay","createItem","newItem","image","update","formData","FormData","append","url","data","response","setTimeout","padding","width","height","Date","getMonth","getFullYear","Math","random","target"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,QAAf,EAAwBC,UAAxB,EAAoCC,SAApC,QAAmD,OAAnD;AACA,SAASC,MAAT,EAAiBC,IAAjB,EAAuBC,GAAvB,EAA4BC,GAA5B,EAAiCC,KAAjC,EAAwCC,QAAxC,EAAkDC,SAAlD,EAA6DC,SAA7D,QAA8E,iBAA9E;AACA,OAAOC,aAAP,MAA0B,6BAA1B;AACA,OAAOC,OAAP,MAAoB,uBAApB;AACA,OAAOC,aAAP,MAA0B,wBAA1B;AACA,OAAOC,IAAP,MAAiB,sBAAjB;AACA,SAAQC,EAAR,EAAYC,MAAZ,QAAyB,iBAAzB;AACA,SAAQC,eAAR,QAA8B,6BAA9B;AACA,SAAQC,YAAR,QAA2B,0BAA3B;AACA,SAASC,KAAT,EAAgBC,OAAhB,QAA+B,mCAA/B;AACA,SAASC,eAAT,QAAgC,gCAAhC;AACA,SAASC,WAAT,QAA4B,sBAA5B;AACA,OAAOC,OAAP,MAAoB,uBAApB;AACA,OAAOC,KAAP,MAAkB,OAAlB;;;;AAEA,SAASC,QAAT,CAAkBC,KAAlB,EAAyB;AAAA;;AACrB,QAAMC,UAAU,GAAG,CAAC,SAAD,EAAY,UAAZ,EAAwB,OAAxB,EAAiC,OAAjC,EAA0C,KAA1C,EAAiD,MAAjD,EACnB,MADmB,EACX,QADW,EACD,WADC,EACY,SADZ,EACuB,UADvB,EACmC,UADnC,CAAnB;AAIA,QAAM,CAACC,OAAD,EAASC,UAAT,IAAuB7B,QAAQ,CAAC,MAAD,CAArC;AACA,QAAM,CAAC8B,OAAD,EAASC,UAAT,IAAuB/B,QAAQ,EAArC;AACA,QAAM,CAACgC,IAAD,EAAMC,OAAN,IAAiBjC,QAAQ,EAA/B;AACA,QAAM,CAACkC,QAAD,EAAWC,WAAX,IAA0BnC,QAAQ,EAAxC;AAEA,QAAM;AAACoC,IAAAA;AAAD,MAAenC,UAAU,CAACgB,eAAD,CAA/B;AACA,QAAM;AAACoB,IAAAA;AAAD,MAAWpC,UAAU,CAACiB,YAAD,CAA3B;AAEA,QAAMoB,SAAS,GAAI,GAAEvB,EAAG,SAAxB;AACA,QAAMwB,UAAU,GAAG,GAAExB,EAAG,SAAxB;AAEA,MAAIyB,GAAG,GAAI,GAAExB,MAAO,IAAGU,KAAK,CAACe,EAAG,cAAhC;AACA,MAAIC,WAAW,GAAG,EAAlB;;AAEA,MAAGN,UAAU,IAAIC,MAAjB,EAAwB;AACpB,QAAGX,KAAK,CAACiB,EAAT,EAAY;AACRD,MAAAA,WAAW,CAACE,IAAZ,eAAiB;AAAA,kBAAMlB,KAAK,CAACiB;AAAZ;AAAA;AAAA;AAAA;AAAA,cAAjB;AACH,KAFD,MAEK;AACD,UAAIE,QAAQ,GAAGT,UAAU,CAACU,MAAX,CAAkBC,CAAC,IAAGA,CAAC,CAACC,IAAF,KAAWtB,KAAK,CAACe,EAAvC,CAAf;AACAI,MAAAA,QAAQ,CAACI,GAAT,CAAa,CAACC,IAAD,EAAOC,KAAP,KAAiB;AAC1BT,QAAAA,WAAW,CAACE,IAAZ,eAAiB,QAAC,aAAD;AAAe,UAAA,KAAK,EAAEM;AAAtB,WAAiCC,KAAjC;AAAA;AAAA;AAAA;AAAA,gBAAjB;AACH,OAFD;AAGH;AACJ;;AAEDT,EAAAA,WAAW,CAACU,IAAZ,CAAiB,CAACL,CAAD,EAAIM,CAAJ,KAAWN,CAAC,CAACrB,KAAF,CAAQ4B,KAAR,CAAcC,IAAd,GAAqBF,CAAC,CAAC3B,KAAF,CAAQ4B,KAAR,CAAcC,IAApC,GAA4C,CAAC,CAA7C,GAAiD,CAA5E;;AAEA,WAASC,WAAT,GAAuB;AACnBC,IAAAA,MAAM,CAACC,QAAP,CAAgBC,MAAhB,CAAuB,KAAvB;AACH;;AAED,WAASC,KAAT,GAAgB;AACZ,UAAMC,aAAa,GAAI,GAAE9C,EAAG,YAA5B;AACA+C,IAAAA,KAAK,CAACD,aAAD,EAAgB;AACjBE,MAAAA,MAAM,EAAE,MADS;AAEjBC,MAAAA,OAAO,EAAE;AACL,kBAAU,kBADL;AAEL,wBAAgB;AAFX,OAFQ;AAMjBC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACjB1B,QAAAA,EAAE,EAAEf,KAAK,CAACe;AADO,OAAf;AANW,KAAhB,CAAL,CASG2B,IATH,CASQC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EATf,EAS2BF,IAT3B,CASgCG,MAAM,IAAE;AACpC;AACApC,MAAAA,WAAW,CAACoC,MAAM,CAACC,OAAR,CAAX;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ,EAA0BH,MAAM,CAACC,OAAjC;AACH,KAbD;AAeA,QAAIG,IAAI,GAAGzC,QAAQ,CAACY,MAAT,CAAgB8B,CAAC,IAAGA,CAAC,CAACD,IAAF,KAAWE,YAAY,CAACC,OAAb,CAAqB,QAArB,CAA/B,CAAX;AACAL,IAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ,EAAmBC,IAAnB,EAlBY,CAmBZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACH;;AAED,WAASI,aAAT,GAAwB;AACpB,QAAGnD,OAAO,KAAK,MAAf,EACIC,UAAU,CAAC,SAAD,CAAV,CADJ,KAGIA,UAAU,CAAC,MAAD,CAAV;AACP;;AAED,QAAMmD,UAAU,GAAE,MAAMC,OAAN,IAAkB;AAChClD,IAAAA,UAAU,CAACkD,OAAO,CAACC,KAAT,CAAV;AACAT,IAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ;AACH,GAHD;;AAKA,iBAAeS,MAAf,GAAuB;AACnB,UAAMC,QAAQ,GAAG,IAAIC,QAAJ,EAAjB;AACAD,IAAAA,QAAQ,CAACE,MAAT,CAAgB,MAAhB,EAAwBtD,IAAxB;AACAoD,IAAAA,QAAQ,CAACE,MAAT,CAAgB,IAAhB,EAAsB5D,KAAK,CAACe,EAA5B;AACA2C,IAAAA,QAAQ,CAACE,MAAT,CAAgB,QAAhB,EAA0B,QAA1B;AACAF,IAAAA,QAAQ,CAACE,MAAT,CAAgB,QAAhB,EAAyB,OAAzB;AACAF,IAAAA,QAAQ,CAACE,MAAT,CAAgB,SAAhB,EAA2BxD,OAA3B;AACAN,IAAAA,KAAK,CAAC;AACFuC,MAAAA,MAAM,EAAE,MADN;AAEFwB,MAAAA,GAAG,EAAEhD,UAFH;AAGFiD,MAAAA,IAAI,EAAEJ,QAHJ;AAIFpB,MAAAA,OAAO,EAAE;AACL,wBAAgB;AADX;AAJP,KAAD,CAAL,CAOGI,IAPH,CAOQqB,QAAQ,IAAI;AAChBhB,MAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ,EAAwBe,QAAxB;AACAC,MAAAA,UAAU,CAAClC,WAAD,EAAc,IAAd,CAAV;AACH,KAVD;AAWH;;AAEDiB,EAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ,EAA0BhD,KAAK,CAACM,IAAhC;AACA,sBACI;AAAA,4BACA,QAAC,GAAD;AAAK,MAAA,EAAE,EAAE,CAAT;AAAA,8BACI,QAAC,SAAD;AAAW,QAAA,KAAK,EAAE;AAAC2D,UAAAA,OAAO,EAAE;AAAV,SAAlB;AAAA,+BACQ,QAAC,SAAD;AAAA,kCACI,QAAC,GAAD;AAAA,oCACI,QAAC,KAAD;AAAO,cAAA,GAAG,EAAEnD,GAAZ;AAAiB,cAAA,KAAK,EAAE;AAACoD,gBAAAA,KAAK,EAAE,MAAR;AAAeC,gBAAAA,MAAM,EAAE;AAAvB;AAAxB;AAAA;AAAA;AAAA;AAAA,oBADJ,eAEI;AAAA,yBAAKnE,KAAK,CAACM,IAAX;AAAA;AAAA;AAAA;AAAA;AAAA,oBAFJ,eAGI,QAAC,aAAD;AAAA;AAAA;AAAA;AAAA,oBAHJ,eAII,QAAC,MAAD;AAAQ,cAAA,OAAO,EAAC,WAAhB;AAA4B,cAAA,SAAS,EAAC,MAAtC;AAA6C,cAAA,OAAO,EAAE4B,KAAtD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAJJ;AAAA;AAAA;AAAA;AAAA;AAAA,kBADJ,eASI,QAAC,GAAD;AAAA,mCACI;AAAA,yBAAKjC,UAAU,CAAC,IAAImE,IAAJ,GAAWC,QAAX,EAAD,CAAf,OAAyC,IAAID,IAAJ,GAAWE,WAAX,EAAzC;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,kBATJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADR;AAAA;AAAA;AAAA;AAAA,cADJ,eAgBI,QAAC,GAAD;AAAA,kBACKtD;AADL;AAAA;AAAA;AAAA;AAAA,cAhBJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADA,eAqBA,QAAC,GAAD;AAAK,MAAA,EAAE,EAAE,CAAT;AAAA,8BACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI,QAAC,OAAD;AAAS,QAAA,EAAE,EAAEhB,KAAK,CAACe;AAAnB,SAA4BwD,IAAI,CAACC,MAAL,EAA5B;AAAA;AAAA;AAAA;AAAA,cAFJ,eAGI,QAAC,MAAD;AAAQ,QAAA,OAAO,EAAC,MAAhB;AAAuB,QAAA,SAAS,EAAC,MAAjC;AAAwC,QAAA,OAAO,EAAEnB,aAAjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAHJ;AAAA;AAAA;AAAA;AAAA;AAAA,YArBA,eA4BA,QAAC,WAAD,CAAa,KAAb;AAAmB,MAAA,OAAO,EAAInD,OAA9B;AAAA,8BACI,QAAC,WAAD,CAAa,KAAb;AAAmB,QAAA,aAAa,EAAEmD,aAAlC;AAAA,+BAAiD,QAAC,eAAD;AAAiB,UAAA,IAAI,EAAE3D;AAAvB;AAAA;AAAA;AAAA;AAAA;AAAjD;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI,QAAC,GAAD;AAAK,QAAA,SAAS,EAAC,2BAAf;AAAA,gCACI,QAAC,GAAD;AAAK,UAAA,EAAE,EAAE,CAAT;AAAA,iCACI,QAAC,OAAD;AAAS,YAAA,UAAU,EAAE4D,UAArB;AAAiC,YAAA,GAAG,EAAExC;AAAtC;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,gBADJ,eAII,QAAC,GAAD;AAAK,UAAA,EAAE,EAAE,CAAT;AAAA,kCACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADJ,eAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAFJ,eAGI,QAAC,IAAD,CAAM,OAAN;AAAc,YAAA,IAAI,EAAC,MAAnB;AAA0B,YAAA,WAAW,EAAEd,KAAK,CAACM,IAA7C;AAAmD,YAAA,QAAQ,EAAE,CAAC;AAACmE,cAAAA;AAAD,aAAD,KAAclE,OAAO,CAACkE,MAAM,CAAC7C,KAAR;AAAlF;AAAA;AAAA;AAAA;AAAA,kBAHJ;AAAA;AAAA;AAAA;AAAA;AAAA,gBAJJ;AAAA;AAAA;AAAA;AAAA;AAAA,cAFJ,eAYI,QAAC,GAAD;AAAK,QAAA,SAAS,EAAC,2BAAf;AAAA,+BACI,QAAC,MAAD;AAAQ,UAAA,OAAO,EAAC,QAAhB;AAAyB,UAAA,OAAO,EAAE6B,MAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,cAZJ;AAAA;AAAA;AAAA;AAAA;AAAA,YA5BA;AAAA,kBADJ;AA+CH;;GA1JQ1D,Q;;KAAAA,Q;AA4JT,eAAeA,QAAf","sourcesContent":["import React, {useState,useContext, useEffect}from 'react'\nimport { Button, Form, Col, Row, Image, Dropdown, Jumbotron, Container } from 'react-bootstrap';\nimport ActivityInput from '../components/ActivityInput'\nimport Balance from '../components/Balance'\nimport SingleExpense from '../pages/SingleExpense'\nimport logo from '../images/signup.png'\nimport {DB, DB_PIC} from '../constants/DB'\nimport {ActivityContext} from '../contexts/activityContext'\nimport {GroupContext} from '../contexts/groupContext'\nimport { faPen, faTimes } from '@fortawesome/free-solid-svg-icons'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { Application } from '../components/export';\nimport Picture from '../components/Picture'\nimport axios from 'axios';\n\nfunction Expenses(props) {\n    const monthNames = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\",\n    \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"\n    ];\n\n    const [display,setDisplay] = useState(\"none\")\n    const [picture,setPicture] = useState()\n    const [name,setName] = useState()\n    const [userInfo, setUserInfo] = useState()\n\n    const {activities} = useContext(ActivityContext)\n    const {groups} = useContext(GroupContext)\n    \n    const leave_URL = `${DB}/reject`\n    const update_URL= `${DB}/update`\n    \n    let pic = `${DB_PIC}/${props.id}/profile.png`\n    let expenseList = [];\n    \n    if(activities && groups){\n        if(props.no){\n            expenseList.push(<div>{props.no}</div>)\n        }else{\n            let activity = activities.filter(a=> a.G_ID === props.id)\n            activity.map((item, index) => {\n                expenseList.push(<ActivityInput value={item} key={index} />)\n            });\n        }\n    }\n\n    expenseList.sort((a, b) => (a.props.value.date > b.props.value.date) ? -1 : 1)\n    \n    function refreshPage() {\n        window.location.reload(false);\n    }\n\n    function leave(){\n        const calculate_URL = `${DB}/calculate`\n        fetch(calculate_URL, {\n            method: 'post',\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n                id: props.id\n            })\n        }).then(res => res.json()).then(result=>{\n            // setUser(result.dataset)\n            setUserInfo(result.dataset)\n            console.log(\"calculate: \",result.dataset);\n        })\n\n        let user = userInfo.filter(u=> u.user === localStorage.getItem('authID'))\n        console.log(\"user\",user);\n        // if(activity.length > 0){\n        //     alert(\"You should pay off all/get pack all the expenses before you leave the group!\")\n        // }else{\n        //     fetch(leave_URL, {\n        //         method: 'post',\n        //         headers: {\n        //             'Accept': 'application/json',\n        //             'Content-Type': 'application/json'\n        //         },\n        //         body: JSON.stringify({\n        //             name: props.name,\n        //             member: localStorage.getItem('authID')\n        //         })\n        //     }).then(res => res.json()).then(result=>{\n        //         console.log(result.dataset);\n        //     })\n        // }\n    }\n\n    function toggleDisplay(){\n        if(display === \"none\")\n            setDisplay(\"display\")\n        else\n            setDisplay(\"none\")\n    }\n\n    const createItem= async(newItem) => {\n        setPicture(newItem.image)\n        console.log(\"inside createItem\");\n    }\n\n    async function update(){\n        const formData = new FormData();\n        formData.append('name', name);\n        formData.append('id', props.id);\n        formData.append('update', 'update');\n        formData.append('upload','group');\n        formData.append('picture', picture);\n        axios({\n            method: \"POST\",\n            url: update_URL,\n            data: formData,\n            headers: {\n                \"Content-Type\": \"multipart/form-data\"\n            }\n        }).then(response => {\n            console.log(\"response\", response);\n            setTimeout(refreshPage, 1000);\n        });\n    }\n\n    console.log(\"props name\", props.name);\n    return (\n        <>\n        <Col sm={6}>\n            <Jumbotron style={{padding: \"10px\"}}>\n                    <Container>\n                        <Row>   \n                            <Image src={pic} style={{width: \"50px\",height: \"50px\"}} />\n                            <h3>{props.name} Expenses</h3>\n                            <SingleExpense />\n                            <Button variant=\"secondary\" className=\"ml-3\" onClick={leave}>\n                                Leave Group\n                            </Button>\n                        </Row>\n                        <Row>\n                            <h6>{monthNames[new Date().getMonth()]} {new Date().getFullYear()}</h6>\n                        </Row>\n                    </Container>\n                </Jumbotron>\n            <Row>\n                {expenseList}\n            </Row>\n        </Col>\n        <Col sm={3}>\n            <h4>GROUP BALANCES</h4>\n            <Balance id={props.id} key={Math.random()}/>\n            <Button variant=\"link\" className=\"ml-3\" onClick={toggleDisplay}>\n                Edit...\n            </Button>\n        </Col>\n        <Application.Group display = {display}>\n            <Application.Close toggleDisplay={toggleDisplay}><FontAwesomeIcon icon={faTimes} /></Application.Close>\n            <Row className=\"justify-content-md-center\">\n                <Col sm={4}>\n                    <Picture createItem={createItem} old={pic}/>\n                </Col>\n                <Col sm={8}>\n                    <h4>Change Group Information</h4>\n                    <h6>My new group name shall be called...</h6>\n                    <Form.Control type=\"text\" placeholder={props.name} onChange={({target}) => setName(target.value)}/>\n                </Col>\n            </Row>\n            <Row className=\"justify-content-md-center\">\n                <Button variant=\"danger\" onClick={update}>Save</Button>\n            </Row>\n        </Application.Group>  \n        </>\n    )\n}\n\nexport default Expenses"]},"metadata":{},"sourceType":"module"}