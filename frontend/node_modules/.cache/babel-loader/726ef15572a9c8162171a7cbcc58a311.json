{"ast":null,"code":"var _jsxFileName = \"/Users/ruichunchen/splitwise-app/frontend/src/pages/userauth/Signin.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { Button, Form, Modal } from 'react-bootstrap';\nimport { Application } from '../../components/export';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faTimes } from '@fortawesome/free-solid-svg-icons';\nimport { DB } from '../../constants/DB';\nimport jwt_decode from \"jwt-decode\";\nimport { useHistory } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction Signin() {\n  _s();\n\n  const [display, setDisplay] = useState(\"none\");\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const Login_URL = `${DB}/signin`;\n  const history = useHistory();\n  const [show, setShow] = useState(false);\n\n  const handleClose = () => setShow(false);\n\n  const handleShow = () => setShow(true);\n\n  function toggleDisplay() {\n    if (display === \"none\") setDisplay(\"display\");else setDisplay(\"none\");\n  }\n\n  async function handleSignin(event) {\n    event.preventDefault();\n\n    if (!email) {\n      return;\n    }\n\n    if (!password) {\n      return;\n    }\n\n    console.log(email, password);\n\n    try {\n      let res = await fetch(Login_URL, {\n        method: 'post',\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          email: email,\n          password: password\n        })\n      });\n      let result = await res.json();\n\n      if (result && result.success) {\n        // if(result && result.token ){\n        //     var token = result.token;\n        //     var decoded = jwt_decode(token);\n        //     localStorage.setItem('authUser', JSON.stringify(decoded.user));\n        //     history.push('/home');\n        // }\n        console.log(\"login success\");\n      } else if (result && result.success === false) {\n        alert(result.msg);\n      }\n    } catch (e) {\n      console.log(e);\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Button, {\n      variant: \"primary\",\n      onClick: handleShow,\n      children: \"Launch demo modal\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Modal, {\n      show: show,\n      onHide: handleClose,\n      animation: false,\n      children: [/*#__PURE__*/_jsxDEV(Modal.Header, {\n        closeButton: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Modal.Body, {\n        children: /*#__PURE__*/_jsxDEV(Form, {\n          onSubmit: handleSignin,\n          method: \"POST\",\n          children: [/*#__PURE__*/_jsxDEV(Form.Group, {\n            controlId: \"formGridEmail\",\n            children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n              children: \"Email\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 82,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n              type: \"email\",\n              placeholder: \"Email 123@gmail.com\",\n              value: email,\n              onChange: ({\n                target\n              }) => setEmail(target.value),\n              required: true\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 83,\n              columnNumber: 25\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 81,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(Form.Text, {\n            className: \"text-muted\",\n            children: \"We'll never share your info with anyone else.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 85,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n            controlId: \"password\",\n            children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n              children: \"Password\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 90,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n              type: \"password\",\n              placeholder: \"Password\",\n              onChange: ({\n                target\n              }) => setPassword(target.value)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 91,\n              columnNumber: 25\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 89,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(Form.Text, {\n            className: \"text-muted\",\n            children: [\"Haven't have account?\", /*#__PURE__*/_jsxDEV(Button, {\n              variant: \"link\",\n              children: \"Sign me in!\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 94,\n              columnNumber: 25\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 93,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            variant: \"primary\",\n            type: \"submit\",\n            children: \"Submit\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 98,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n}\n\n_s(Signin, \"dIJpDRQGNpnq8PspJSnqaleP0u4=\", false, function () {\n  return [useHistory];\n});\n\n_c = Signin;\nexport default Signin;\n\nvar _c;\n\n$RefreshReg$(_c, \"Signin\");","map":{"version":3,"sources":["/Users/ruichunchen/splitwise-app/frontend/src/pages/userauth/Signin.js"],"names":["React","useState","Button","Form","Modal","Application","FontAwesomeIcon","faTimes","DB","jwt_decode","useHistory","Signin","display","setDisplay","email","setEmail","password","setPassword","Login_URL","history","show","setShow","handleClose","handleShow","toggleDisplay","handleSignin","event","preventDefault","console","log","res","fetch","method","headers","body","JSON","stringify","result","json","success","alert","msg","e","target","value"],"mappings":"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","sourcesContent":["import React, {useState} from 'react'\nimport { Button, Form, Modal } from 'react-bootstrap';\nimport { Application } from '../../components/export';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faTimes} from '@fortawesome/free-solid-svg-icons'\nimport {DB} from '../../constants/DB'\nimport jwt_decode from \"jwt-decode\";\nimport { useHistory} from 'react-router-dom';\n\nfunction Signin() {\n    const [display,setDisplay] = useState(\"none\")\n    const [email, setEmail] = useState('');\n    const [password, setPassword] = useState('');\n\n    const Login_URL = `${DB}/signin`\n    const history = useHistory();\n\n\n    const [show, setShow] = useState(false);\n\n    const handleClose = () => setShow(false);\n    const handleShow = () => setShow(true);\n\n    function toggleDisplay(){\n        if(display === \"none\")\n            setDisplay(\"display\")\n        else\n            setDisplay(\"none\")\n    }\n\n    async function handleSignin(event){\n        event.preventDefault();\n        if(!email){\n            return;\n        }\n        if(!password){\n            return;\n        }\n        console.log(email, password);\n        try{\n            let res = await fetch(Login_URL, {\n                method: 'post',\n                headers: {\n                    'Accept': 'application/json',\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({\n                    email: email,\n                    password: password\n                })\n            });\n            let result = await res.json();\n            \n            if(result && result.success){\n                // if(result && result.token ){\n                //     var token = result.token;\n                //     var decoded = jwt_decode(token);\n                //     localStorage.setItem('authUser', JSON.stringify(decoded.user));\n                //     history.push('/home');\n                // }\n                \n                console.log(\"login success\");\n            }else if(result && result.success === false){\n                alert(result.msg);\n            }\n        }catch(e){\n            console.log(e);\n        }\n    }\n\n    \n    return (    \n        <>\n        <Button variant=\"primary\" onClick={handleShow}>\n            Launch demo modal\n        </Button>\n        <Modal show={show} onHide={handleClose} animation={false}>\n            <Modal.Header closeButton></Modal.Header>\n            <Modal.Body>\n                <Form onSubmit={handleSignin} method=\"POST\">\n                    <Form.Group controlId=\"formGridEmail\">\n                        <Form.Label>Email</Form.Label>\n                        <Form.Control type=\"email\" placeholder=\"Email 123@gmail.com\" value={email} onChange={({ target }) => setEmail(target.value)} required/>\n                    </Form.Group>\n                    <Form.Text className=\"text-muted\">\n                    We'll never share your info with anyone else.\n                    </Form.Text>\n\n                    <Form.Group controlId=\"password\">\n                        <Form.Label>Password</Form.Label>\n                        <Form.Control type=\"password\" placeholder=\"Password\" onChange={({ target }) => setPassword(target.value)}/>\n                    </Form.Group>\n                    <Form.Text className=\"text-muted\">Haven't have account? \n                        <Button variant=\"link\">\n                                Sign me in!\n                        </Button>\n                    </Form.Text>\n                    <Button variant=\"primary\" type=\"submit\">\n                        Submit\n                    </Button>\n                </Form>\n            </Modal.Body>\n        </Modal>\n        \n        {/* <Button variant=\"primary\" onClick={toggleDisplay}>Sign In</Button>\n        <Application.Base display = {display}>\n            <Application.Close toggleDisplay={toggleDisplay}><FontAwesomeIcon icon={faTimes} /></Application.Close>\n            <Form onSubmit={handleSignin} method=\"POST\">\n                <Form.Group controlId=\"formGridEmail\">\n                    <Form.Label>Email: </Form.Label>\n                    <Form.Control type=\"email\" placeholder=\"Email 123@gmail.com\" value={email} onChange={({ target }) => setEmail(target.value)} required/>\n                </Form.Group>\n                <Form.Text className=\"text-muted\">\n                We'll never share your info with anyone else.\n                </Form.Text>\n\n                <Form.Group controlId=\"password\">\n                    <Form.Label>Password</Form.Label>\n                    <Form.Control type=\"password\" placeholder=\"Password\" onChange={({ target }) => setPassword(target.value)}/>\n                </Form.Group>\n                <Form.Text className=\"text-muted\">Haven't have account? \n                    <Button variant=\"link\">\n                            Sign me in!\n                    </Button>\n                </Form.Text>\n                <Button variant=\"primary\" type=\"submit\">\n                    Submit\n                </Button>\n            </Form>\n        </Application.Base>   */}\n        </>\n    )\n}\n\nexport default Signin"]},"metadata":{},"sourceType":"module"}