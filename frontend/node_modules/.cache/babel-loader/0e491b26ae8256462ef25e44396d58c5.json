{"ast":null,"code":"var _jsxFileName = \"/Users/ruichunchen/splitwise-app/frontend/src/pages/Activity.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useContext, useEffect } from 'react';\nimport { Button, Col, Row, Image, Jumbotron, Container } from 'react-bootstrap';\nimport DashNav from '../pages/Dashboard/dashNav';\nimport ActivityInput from '../components/ActivityInput';\nimport { DB } from '../constants/DB'; // import ExpenseInput from '../components/ExpenseInput'\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction Activity() {\n  _s();\n\n  const monthNames = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\n  const recent_URL = `${DB}/recent`;\n  const [activities, setActivities] = useState();\n  const [groups, setGroups] = useState();\n  const [expenses, setExpenses] = useState();\n  let expenseList = [];\n  useEffect(() => {\n    try {\n      fetch(recent_URL, {\n        method: 'post',\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          name: localStorage.getItem(\"authID\")\n        })\n      }).then(res => res.json()).then(result => {\n        // setActivities(result.dataset)\n        setActivities(result.activities);\n        setGroups(result.groups);\n        setExpenses(result.expenses);\n        console.log(\"this is a activity\", result.activities);\n        console.log(\"this is a groups\", result.groups);\n        console.log(\"this is a expenses\", result.expenses);\n      });\n    } catch (e) {\n      console.log(e);\n    }\n  }, []);\n\n  if (activities) {\n    activities.map((item, index) => {\n      expenseList.push( /*#__PURE__*/_jsxDEV(ActivityInput, {\n        value: item\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 30\n      }, this));\n    });\n  }\n\n  if (expenses) {\n    expenses.map((item, index) => {\n      expenseList.push( /*#__PURE__*/_jsxDEV(ActivityInput, {\n        value: item\n      }, index * 10, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 30\n      }, this));\n    });\n  }\n\n  expenseList.sort((a, b) => a.props.value.date > b.props.value.date ? -1 : 1);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Row, {\n      children: [/*#__PURE__*/_jsxDEV(Col, {\n        sm: 3,\n        children: /*#__PURE__*/_jsxDEV(DashNav, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Col, {\n        sm: 6,\n        children: [/*#__PURE__*/_jsxDEV(Jumbotron, {\n          style: {\n            padding: \"10px\"\n          },\n          children: /*#__PURE__*/_jsxDEV(Container, {\n            children: [/*#__PURE__*/_jsxDEV(Row, {\n              children: /*#__PURE__*/_jsxDEV(\"h3\", {\n                children: \"Recent Activity\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 67,\n                columnNumber: 29\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 66,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(Row, {\n              children: /*#__PURE__*/_jsxDEV(\"h6\", {\n                children: [monthNames[new Date().getMonth()], \" \", new Date().getFullYear()]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 70,\n                columnNumber: 29\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 69,\n              columnNumber: 25\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 65,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(Row, {\n          children: expenseList\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 9\n    }, this)\n  }, void 0, false);\n}\n\n_s(Activity, \"GTgV1LMMJAlKc20F6pLBPr1QyjA=\");\n\n_c = Activity;\nexport default Activity;\n\nvar _c;\n\n$RefreshReg$(_c, \"Activity\");","map":{"version":3,"sources":["/Users/ruichunchen/splitwise-app/frontend/src/pages/Activity.js"],"names":["React","useState","useContext","useEffect","Button","Col","Row","Image","Jumbotron","Container","DashNav","ActivityInput","DB","Activity","monthNames","recent_URL","activities","setActivities","groups","setGroups","expenses","setExpenses","expenseList","fetch","method","headers","body","JSON","stringify","name","localStorage","getItem","then","res","json","result","console","log","e","map","item","index","push","sort","a","b","props","value","date","padding","Date","getMonth","getFullYear"],"mappings":"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","sourcesContent":["import React, {useState,useContext,useEffect}from 'react'\nimport { Button, Col, Row, Image, Jumbotron, Container } from 'react-bootstrap';\nimport DashNav from '../pages/Dashboard/dashNav'\nimport ActivityInput from '../components/ActivityInput'\nimport {DB} from '../constants/DB'\n// import ExpenseInput from '../components/ExpenseInput'\nfunction Activity() {\n\n    const monthNames = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\",\n    \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"\n    ];\n    const recent_URL= `${DB}/recent`\n    const [activities, setActivities] = useState()\n    const [groups, setGroups] = useState()\n    const [expenses, setExpenses] = useState()\n\n    let expenseList = [];\n\n    useEffect( ()=>{\n        try{\n            fetch(recent_URL, {\n                method: 'post',\n                headers: {\n                    'Accept': 'application/json',\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({\n                    name: localStorage.getItem(\"authID\")\n                })\n            }).then(res => res.json()).then(result=>{\n                // setActivities(result.dataset)\n                setActivities(result.activities)\n                setGroups(result.groups)\n                setExpenses(result.expenses)\n                console.log(\"this is a activity\", result.activities);\n                console.log(\"this is a groups\", result.groups);\n                console.log(\"this is a expenses\", result.expenses);\n            })\n        }catch(e){\n            console.log(e);\n        }\n    },[])\n\n    if(activities){\n        activities.map((item, index) => {\n            expenseList.push(<ActivityInput value={item} key={index} />)\n        });\n    }\n    if(expenses){\n        expenses.map((item, index) => {\n            expenseList.push(<ActivityInput value={item} key={index*10} />)\n        });\n    }\n\n    expenseList.sort((a, b) => (a.props.value.date > b.props.value.date) ? -1 : 1)\n\n    return (\n        <>\n        <Row>\n            <Col sm={3}>\n                <DashNav />\n            </Col>\n            <Col sm={6}>\n                <Jumbotron style={{padding: \"10px\"}}>\n                    <Container>\n                        <Row>   \n                            <h3>Recent Activity</h3>\n                        </Row>\n                        <Row>\n                            <h6>{monthNames[new Date().getMonth()]} {new Date().getFullYear()}</h6>\n                        </Row>\n                    </Container>\n                </Jumbotron>\n                <Row>\n                    {expenseList}\n                </Row>\n            </Col>\n        </Row>\n        </>\n    )\n}\n\nexport default Activity"]},"metadata":{},"sourceType":"module"}