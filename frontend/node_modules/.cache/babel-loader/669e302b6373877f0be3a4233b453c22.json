{"ast":null,"code":"var _jsxFileName = \"/Users/ruichunchen/splitwise-app/frontend/src/pages/Expenses.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useContext, useEffect } from 'react';\nimport { Button, Form, Col, Row, Image, Dropdown, Jumbotron, Container } from 'react-bootstrap';\nimport ActivityInput from '../components/ActivityInput';\nimport Balance from '../components/Balance';\nimport SingleExpense from '../pages/SingleExpense';\nimport logo from '../images/signup.png';\nimport { DB } from '../constants/DB';\nimport { ActivityContext } from '../contexts/activityContext';\nimport { GroupContext } from '../contexts/groupContext';\nimport { faPen, faTimes } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { Application } from '../components/export';\nimport Picture from '../components/Picture';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction Expenses(props) {\n  _s();\n\n  const monthNames = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\n  const [display, setDisplay] = useState(\"none\");\n  const [picture, setPicture] = useState();\n  const [name, setName] = useState();\n  const {\n    activities\n  } = useContext(ActivityContext);\n  const {\n    groups\n  } = useContext(GroupContext);\n  const leave_URL = `${DB}/reject`;\n  let expenseList = [];\n  let pic;\n  console.log(\"props\", props); // console.log(\"props.expense[0].G_ID\", props.expense[0].G_ID);\n\n  if (activities) {\n    let activity = activities.filter(a => a.G_ID === props.id);\n    activity.map((item, index) => {\n      expenseList.push( /*#__PURE__*/_jsxDEV(ActivityInput, {\n        value: item\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 30\n      }, this));\n    });\n  }\n\n  expenseList.sort((a, b) => a.props.value.date > b.props.value.date ? -1 : 1);\n\n  function leave() {\n    let allExpense = props.expense.filter(p => p.user === localStorage.getItem('authID') && p.role !== 1 && p.amount !== 0);\n    console.log(\"allExpense\", allExpense);\n\n    if (allExpense.length > 0) {\n      alert(\"You should pay off all the expenses before you leave the group!\");\n    } else {\n      fetch(leave_URL, {\n        method: 'post',\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          id: parseInt(props.expense[0].G_ID),\n          member: localStorage.getItem('authID')\n        })\n      }).then(res => res.json()).then(result => {\n        console.log(result.dataset);\n      });\n    }\n  }\n\n  function toggleDisplay() {\n    if (display === \"none\") setDisplay(\"display\");else setDisplay(\"none\");\n  }\n\n  const createItem = async newItem => {\n    setPicture(newItem.image);\n    console.log(\"inside createItem\");\n  };\n\n  if (groups) {\n    console.log(\"groups\", groups);\n    group = groups.filter(g => g.G_ID === props.id);\n    setPicture(group[0].picture);\n    setName(group[0].name);\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Col, {\n      sm: 6,\n      children: [/*#__PURE__*/_jsxDEV(Jumbotron, {\n        style: {\n          padding: \"10px\"\n        },\n        children: /*#__PURE__*/_jsxDEV(Container, {\n          children: [/*#__PURE__*/_jsxDEV(Row, {\n            children: [/*#__PURE__*/_jsxDEV(Image, {\n              src: picture ? picture : null,\n              style: {\n                width: \"50px\",\n                height: \"50px\"\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 89,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n              children: \"Home Expenses\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 90,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(SingleExpense, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 91,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Button, {\n              variant: \"secondary\",\n              className: \"ml-3\",\n              onClick: leave,\n              children: \"Leave Group\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 92,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 88,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Row, {\n            children: /*#__PURE__*/_jsxDEV(\"h6\", {\n              children: [monthNames[new Date().getMonth()], \" \", new Date().getFullYear()]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 97,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 96,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Row, {\n        children: expenseList\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Col, {\n      sm: 3,\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        children: \"GROUP BALANCES\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Balance, {\n        id: props.id\n      }, Math.random(), false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"link\",\n        className: \"ml-3\",\n        onClick: toggleDisplay,\n        children: \"Edit...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Application.Group, {\n      display: display,\n      children: [/*#__PURE__*/_jsxDEV(Application.Close, {\n        toggleDisplay: toggleDisplay,\n        children: /*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n          icon: faTimes\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 62\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Row, {\n        className: \"justify-content-md-center\",\n        children: [/*#__PURE__*/_jsxDEV(Col, {\n          sm: 4,\n          children: /*#__PURE__*/_jsxDEV(Picture, {\n            createItem: createItem\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 116,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(Col, {\n          sm: 8,\n          children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n            children: \"Change Group Information\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 119,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"h6\", {\n            children: \"My group shall be called...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 120,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n            type: \"text\",\n            placeholder: \"Enter group name\",\n            onChange: ({\n              target\n            }) => setGroup(target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 121,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Row, {\n        className: \"justify-content-md-center\",\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"danger\",\n          onClick: allUser,\n          children: \"Save\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n}\n\n_s(Expenses, \"bd+FygWkefs1hyykJWCWqTflIdE=\");\n\n_c = Expenses;\nexport default Expenses;\n\nvar _c;\n\n$RefreshReg$(_c, \"Expenses\");","map":{"version":3,"sources":["/Users/ruichunchen/splitwise-app/frontend/src/pages/Expenses.js"],"names":["React","useState","useContext","useEffect","Button","Form","Col","Row","Image","Dropdown","Jumbotron","Container","ActivityInput","Balance","SingleExpense","logo","DB","ActivityContext","GroupContext","faPen","faTimes","FontAwesomeIcon","Application","Picture","Expenses","props","monthNames","display","setDisplay","picture","setPicture","name","setName","activities","groups","leave_URL","expenseList","pic","console","log","activity","filter","a","G_ID","id","map","item","index","push","sort","b","value","date","leave","allExpense","expense","p","user","localStorage","getItem","role","amount","length","alert","fetch","method","headers","body","JSON","stringify","parseInt","member","then","res","json","result","dataset","toggleDisplay","createItem","newItem","image","group","g","padding","width","height","Date","getMonth","getFullYear","Math","random","target","setGroup","allUser"],"mappings":"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","sourcesContent":["import React, {useState,useContext, useEffect}from 'react'\nimport { Button, Form, Col, Row, Image, Dropdown, Jumbotron, Container } from 'react-bootstrap';\nimport ActivityInput from '../components/ActivityInput'\nimport Balance from '../components/Balance'\nimport SingleExpense from '../pages/SingleExpense'\nimport logo from '../images/signup.png'\nimport {DB} from '../constants/DB'\nimport {ActivityContext} from '../contexts/activityContext'\nimport {GroupContext} from '../contexts/groupContext'\nimport { faPen, faTimes } from '@fortawesome/free-solid-svg-icons'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { Application } from '../components/export';\nimport Picture from '../components/Picture'\n\nfunction Expenses(props) {\n    const monthNames = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\",\n    \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"\n    ];\n\n    const [display,setDisplay] = useState(\"none\")\n    const [picture,setPicture] = useState()\n    const [name,setName] = useState()\n\n    const {activities} = useContext(ActivityContext)\n    const {groups} = useContext(GroupContext)\n    const leave_URL = `${DB}/reject`\n    \n    let expenseList = [];\n    let pic\n    console.log(\"props\",props);\n\n    // console.log(\"props.expense[0].G_ID\", props.expense[0].G_ID);\n    \n    if(activities){\n        let activity = activities.filter(a=> a.G_ID === props.id)\n        activity.map((item, index) => {\n            expenseList.push(<ActivityInput value={item} key={index} />)\n        });\n    }\n\n    expenseList.sort((a, b) => (a.props.value.date > b.props.value.date) ? -1 : 1)\n    \n    function leave(){\n        let allExpense = props.expense.filter(p => (p.user===localStorage.getItem('authID') && p.role !== 1 && p.amount !== 0))\n        console.log(\"allExpense\", allExpense);\n        if(allExpense.length > 0){\n            alert(\"You should pay off all the expenses before you leave the group!\")\n        }else{\n            fetch(leave_URL, {\n                method: 'post',\n                headers: {\n                    'Accept': 'application/json',\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({\n                    id: parseInt(props.expense[0].G_ID),\n                    member: localStorage.getItem('authID')\n                })\n            }).then(res => res.json()).then(result=>{\n                console.log(result.dataset);\n            })\n        }\n    }\n\n    function toggleDisplay(){\n        if(display === \"none\")\n            setDisplay(\"display\")\n        else\n            setDisplay(\"none\")\n    }\n\n    const createItem= async(newItem) => {\n        setPicture(newItem.image)\n        console.log(\"inside createItem\");\n    }\n\n    if(groups){\n        console.log(\"groups\", groups);\n        group = groups.filter(g => g.G_ID === props.id)\n        setPicture(group[0].picture)\n        setName(group[0].name)\n    }\n    return (\n        <>\n        <Col sm={6}>\n            <Jumbotron style={{padding: \"10px\"}}>\n                    <Container>\n                        <Row>   \n                            <Image src={picture ? picture : null} style={{width: \"50px\",height: \"50px\"}} />\n                            <h3>Home Expenses</h3>\n                            <SingleExpense />\n                            <Button variant=\"secondary\" className=\"ml-3\" onClick={leave}>\n                                Leave Group\n                            </Button>\n                        </Row>\n                        <Row>\n                            <h6>{monthNames[new Date().getMonth()]} {new Date().getFullYear()}</h6>\n                        </Row>\n                    </Container>\n                </Jumbotron>\n            <Row>\n                {expenseList}\n            </Row>\n        </Col>\n        <Col sm={3}>\n            <h4>GROUP BALANCES</h4>\n            <Balance id={props.id} key={Math.random()}/>\n            <Button variant=\"link\" className=\"ml-3\" onClick={toggleDisplay}>\n                Edit...\n            </Button>\n        </Col>\n        <Application.Group display = {display}>\n            <Application.Close toggleDisplay={toggleDisplay}><FontAwesomeIcon icon={faTimes} /></Application.Close>\n            <Row className=\"justify-content-md-center\">\n                <Col sm={4}>\n                    <Picture createItem={createItem}/>\n                </Col>\n                <Col sm={8}>\n                    <h4>Change Group Information</h4>\n                    <h6>My group shall be called...</h6>\n                    <Form.Control type=\"text\" placeholder=\"Enter group name\" onChange={({target}) => setGroup(target.value)} />\n                </Col>\n            </Row>\n            <Row className=\"justify-content-md-center\">\n                <Button variant=\"danger\" onClick={allUser}>Save</Button>\n            </Row>\n        </Application.Group>  \n        </>\n    )\n}\n\nexport default Expenses"]},"metadata":{},"sourceType":"module"}